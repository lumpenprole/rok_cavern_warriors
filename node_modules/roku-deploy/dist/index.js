"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.zipPackage = exports.zipFolder = exports.takeScreenshot = exports.stringifyManifest = exports.signExistingPackage = exports.retrieveSignedPackage = exports.rekeyDevice = exports.publish = exports.pressHomeButton = exports.prepublishToStaging = exports.parseManifest = exports.normalizeRootDir = exports.normalizeFilesArray = exports.getOutputZipFilePath = exports.getOutputPkgFilePath = exports.getOptions = exports.getFilePaths = exports.getDeviceInfo = exports.getDestPath = exports.deployAndSignPackage = exports.deploy = exports.deleteInstalledChannel = exports.createPackage = exports.rokuDeploy = void 0;
const RokuDeploy_1 = require("./RokuDeploy");
//export everything from the RokuDeploy file
__exportStar(require("./RokuDeploy"), exports);
__exportStar(require("./util"), exports);
__exportStar(require("./RokuDeployOptions"), exports);
__exportStar(require("./Errors"), exports);
//create a new static instance of RokuDeploy, and export those functions for backwards compatibility
exports.rokuDeploy = new RokuDeploy_1.RokuDeploy();
let createPackage = RokuDeploy_1.RokuDeploy.prototype.createPackage.bind(exports.rokuDeploy);
exports.createPackage = createPackage;
let deleteInstalledChannel = RokuDeploy_1.RokuDeploy.prototype.deleteInstalledChannel.bind(exports.rokuDeploy);
exports.deleteInstalledChannel = deleteInstalledChannel;
let deploy = RokuDeploy_1.RokuDeploy.prototype.deploy.bind(exports.rokuDeploy);
exports.deploy = deploy;
let deployAndSignPackage = RokuDeploy_1.RokuDeploy.prototype.deployAndSignPackage.bind(exports.rokuDeploy);
exports.deployAndSignPackage = deployAndSignPackage;
let getDestPath = RokuDeploy_1.RokuDeploy.prototype.getDestPath.bind(exports.rokuDeploy);
exports.getDestPath = getDestPath;
let getDeviceInfo = RokuDeploy_1.RokuDeploy.prototype.getDeviceInfo.bind(exports.rokuDeploy);
exports.getDeviceInfo = getDeviceInfo;
let getFilePaths = RokuDeploy_1.RokuDeploy.prototype.getFilePaths.bind(exports.rokuDeploy);
exports.getFilePaths = getFilePaths;
let getOptions = RokuDeploy_1.RokuDeploy.prototype.getOptions.bind(exports.rokuDeploy);
exports.getOptions = getOptions;
let getOutputPkgFilePath = RokuDeploy_1.RokuDeploy.prototype.getOutputPkgFilePath.bind(exports.rokuDeploy);
exports.getOutputPkgFilePath = getOutputPkgFilePath;
let getOutputZipFilePath = RokuDeploy_1.RokuDeploy.prototype.getOutputZipFilePath.bind(exports.rokuDeploy);
exports.getOutputZipFilePath = getOutputZipFilePath;
let normalizeFilesArray = RokuDeploy_1.RokuDeploy.prototype.normalizeFilesArray.bind(exports.rokuDeploy);
exports.normalizeFilesArray = normalizeFilesArray;
let normalizeRootDir = RokuDeploy_1.RokuDeploy.prototype.normalizeRootDir.bind(exports.rokuDeploy);
exports.normalizeRootDir = normalizeRootDir;
let parseManifest = RokuDeploy_1.RokuDeploy.prototype.parseManifest.bind(exports.rokuDeploy);
exports.parseManifest = parseManifest;
let prepublishToStaging = RokuDeploy_1.RokuDeploy.prototype.prepublishToStaging.bind(exports.rokuDeploy);
exports.prepublishToStaging = prepublishToStaging;
let pressHomeButton = RokuDeploy_1.RokuDeploy.prototype.pressHomeButton.bind(exports.rokuDeploy);
exports.pressHomeButton = pressHomeButton;
let publish = RokuDeploy_1.RokuDeploy.prototype.publish.bind(exports.rokuDeploy);
exports.publish = publish;
let rekeyDevice = RokuDeploy_1.RokuDeploy.prototype.rekeyDevice.bind(exports.rokuDeploy);
exports.rekeyDevice = rekeyDevice;
let retrieveSignedPackage = RokuDeploy_1.RokuDeploy.prototype.retrieveSignedPackage.bind(exports.rokuDeploy);
exports.retrieveSignedPackage = retrieveSignedPackage;
let signExistingPackage = RokuDeploy_1.RokuDeploy.prototype.signExistingPackage.bind(exports.rokuDeploy);
exports.signExistingPackage = signExistingPackage;
let stringifyManifest = RokuDeploy_1.RokuDeploy.prototype.stringifyManifest.bind(exports.rokuDeploy);
exports.stringifyManifest = stringifyManifest;
let takeScreenshot = RokuDeploy_1.RokuDeploy.prototype.takeScreenshot.bind(exports.rokuDeploy);
exports.takeScreenshot = takeScreenshot;
let zipFolder = RokuDeploy_1.RokuDeploy.prototype.zipFolder.bind(exports.rokuDeploy);
exports.zipFolder = zipFolder;
let zipPackage = RokuDeploy_1.RokuDeploy.prototype.zipPackage.bind(exports.rokuDeploy);
exports.zipPackage = zipPackage;
//# sourceMappingURL=index.js.map