"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MissingRequiredOptionError = exports.ConvertError = exports.CompileError = exports.UnknownDeviceResponseError = exports.FailedDeviceResponseError = exports.UnparsableDeviceResponseError = exports.UnauthorizedDeviceResponseError = exports.InvalidDeviceResponseCodeError = void 0;
class InvalidDeviceResponseCodeError extends Error {
    constructor(message, results) {
        super(message);
        this.results = results;
        Object.setPrototypeOf(this, InvalidDeviceResponseCodeError.prototype);
    }
}
exports.InvalidDeviceResponseCodeError = InvalidDeviceResponseCodeError;
class UnauthorizedDeviceResponseError extends Error {
    constructor(message, results) {
        super(message);
        this.results = results;
        Object.setPrototypeOf(this, UnauthorizedDeviceResponseError.prototype);
    }
}
exports.UnauthorizedDeviceResponseError = UnauthorizedDeviceResponseError;
class UnparsableDeviceResponseError extends Error {
    constructor(message, results) {
        super(message);
        this.results = results;
        Object.setPrototypeOf(this, UnparsableDeviceResponseError.prototype);
    }
}
exports.UnparsableDeviceResponseError = UnparsableDeviceResponseError;
class FailedDeviceResponseError extends Error {
    constructor(message, results) {
        super(message);
        this.results = results;
        Object.setPrototypeOf(this, FailedDeviceResponseError.prototype);
    }
}
exports.FailedDeviceResponseError = FailedDeviceResponseError;
class UnknownDeviceResponseError extends Error {
    constructor(message, results) {
        super(message);
        this.results = results;
        Object.setPrototypeOf(this, UnknownDeviceResponseError.prototype);
    }
}
exports.UnknownDeviceResponseError = UnknownDeviceResponseError;
class CompileError extends Error {
    constructor(message, results, rokuMessages) {
        super(message);
        this.results = results;
        this.rokuMessages = rokuMessages;
        Object.setPrototypeOf(this, CompileError.prototype);
    }
}
exports.CompileError = CompileError;
class ConvertError extends Error {
    constructor(message) {
        super(message);
        Object.setPrototypeOf(this, ConvertError.prototype);
    }
}
exports.ConvertError = ConvertError;
class MissingRequiredOptionError extends Error {
    constructor(message) {
        super(message);
        Object.setPrototypeOf(this, MissingRequiredOptionError.prototype);
    }
}
exports.MissingRequiredOptionError = MissingRequiredOptionError;
//# sourceMappingURL=Errors.js.map