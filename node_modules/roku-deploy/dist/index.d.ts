/// <reference types="node" />
import { RokuDeploy } from './RokuDeploy';
export * from './RokuDeploy';
export * from './util';
export * from './RokuDeployOptions';
export * from './Errors';
export declare const rokuDeploy: RokuDeploy;
declare let createPackage: (options: import("./RokuDeployOptions").RokuDeployOptions, beforeZipCallback?: (info: import("./RokuDeploy").BeforeZipCallbackInfo) => void | Promise<void>) => Promise<void>;
declare let deleteInstalledChannel: (options?: import("./RokuDeployOptions").RokuDeployOptions) => Promise<import("./RokuDeploy").HttpResponse>;
declare let deploy: (options?: import("./RokuDeployOptions").RokuDeployOptions, beforeZipCallback?: (info: import("./RokuDeploy").BeforeZipCallbackInfo) => void) => Promise<{
    message: string;
    results: any;
}>;
declare let deployAndSignPackage: (options?: import("./RokuDeployOptions").RokuDeployOptions, beforeZipCallback?: (info: import("./RokuDeploy").BeforeZipCallbackInfo) => void) => Promise<string>;
declare let getDestPath: (srcPathAbsolute: string, files: import("./RokuDeployOptions").FileEntry[], rootDir: string, skipMatch?: boolean) => string;
declare let getDeviceInfo: (options?: import("./RokuDeployOptions").RokuDeployOptions) => Promise<any>;
declare let getFilePaths: (files: import("./RokuDeployOptions").FileEntry[], rootDir: string) => Promise<import("./RokuDeploy").StandardizedFileEntry[]>;
declare let getOptions: (options?: import("./RokuDeployOptions").RokuDeployOptions) => {
    project?: string;
    outDir?: string;
    outFile?: string;
    rootDir?: string;
    files?: import("./RokuDeployOptions").FileEntry[];
    retainStagingFolder?: boolean;
    retainStagingDir?: boolean;
    retainDeploymentArchive?: boolean;
    stagingFolderPath?: string;
    stagingDir?: string;
    host?: string;
    packagePort?: number;
    remoteDebug?: boolean;
    remoteDebugConnectEarly?: boolean;
    remotePort?: number;
    timeout?: number;
    username?: string;
    password?: string;
    signingPassword?: string;
    rekeySignedPackage?: string;
    devId?: string;
    incrementBuildNumber?: boolean;
    convertToSquashfs?: boolean;
    failOnCompileError?: boolean;
    logLevel?: import("./Logger").LogLevel;
    deleteInstalledChannel?: boolean;
};
declare let getOutputPkgFilePath: (options?: import("./RokuDeployOptions").RokuDeployOptions) => string;
declare let getOutputZipFilePath: (options: import("./RokuDeployOptions").RokuDeployOptions) => string;
declare let normalizeFilesArray: (files: import("./RokuDeployOptions").FileEntry[]) => (string | import("./RokuDeploy").StandardizedFileEntry)[];
declare let normalizeRootDir: (rootDir: string) => string;
declare let parseManifest: (manifestPath: string) => Promise<import("./RokuDeploy").ManifestData>;
declare let prepublishToStaging: (options: import("./RokuDeployOptions").RokuDeployOptions) => Promise<string>;
declare let pressHomeButton: (host: any, port?: number, timeout?: number) => Promise<import("./RokuDeploy").HttpResponse>;
declare let publish: (options: import("./RokuDeployOptions").RokuDeployOptions) => Promise<{
    message: string;
    results: any;
}>;
declare let rekeyDevice: (options: import("./RokuDeployOptions").RokuDeployOptions) => Promise<void>;
declare let retrieveSignedPackage: (pkgPath: string, options: import("./RokuDeployOptions").RokuDeployOptions) => Promise<string>;
declare let signExistingPackage: (options: import("./RokuDeployOptions").RokuDeployOptions) => Promise<string>;
declare let stringifyManifest: (manifestData: import("./RokuDeploy").ManifestData) => string;
declare let takeScreenshot: (options: import("./RokuDeploy").TakeScreenshotOptions) => Promise<string>;
declare let zipFolder: (srcFolder: string, zipFilePath: string, preFileZipCallback?: (file: import("./RokuDeploy").StandardizedFileEntry, data: Buffer) => Buffer, files?: import("./RokuDeployOptions").FileEntry[]) => Promise<void>;
declare let zipPackage: (options: import("./RokuDeployOptions").RokuDeployOptions) => Promise<void>;
export { createPackage, deleteInstalledChannel, deploy, deployAndSignPackage, getDestPath, getDeviceInfo, getFilePaths, getOptions, getOutputPkgFilePath, getOutputZipFilePath, normalizeFilesArray, normalizeRootDir, parseManifest, prepublishToStaging, pressHomeButton, publish, rekeyDevice, retrieveSignedPackage, signExistingPackage, stringifyManifest, takeScreenshot, zipFolder, zipPackage };
