"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const chai_config_spec_1 = require("../../chai-config.spec");
const DiagnosticMessages_1 = require("../../DiagnosticMessages");
const testHelpers_spec_1 = require("../../testHelpers.spec");
const Program_1 = require("../../Program");
const reflection_1 = require("../../astUtils/reflection");
describe('BrsFileValidator', () => {
    let program;
    beforeEach(() => {
        program = new Program_1.Program({});
    });
    it('links dotted get expression parents', () => {
        const file = program.setFile('source/main.bs', `
            sub main()
                print {}.beta.charlie
            end sub
        `);
        program.validate();
        const func = file.parser.ast.statements[0];
        const print = func.func.body.statements[0];
        (0, chai_config_spec_1.expect)(print.parent).to.equal(func.func.body);
        const charlie = print.expressions[0];
        (0, chai_config_spec_1.expect)(charlie.parent).to.equal(print);
        const beta = charlie.obj;
        (0, chai_config_spec_1.expect)(beta.parent).to.equal(charlie);
        const aaLiteral = beta.obj;
        (0, chai_config_spec_1.expect)(aaLiteral.parent).to.equal(beta);
    });
    it('links NamespacedVariableNameExpression dotted get parents', () => {
        const { ast } = program.setFile('source/main.bs', `
            namespace alpha.bravo
                class Delta extends alpha.bravo.Charlie
                end class
                class Charlie
                end class
            end namespace
        `);
        const namespace = ast.findChild(reflection_1.isNamespaceStatement);
        const deltaClass = namespace.findChild(reflection_1.isClassStatement);
        (0, chai_config_spec_1.expect)(deltaClass.parent).to.equal(namespace.body);
        const charlie = deltaClass.parentClassName.expression;
        (0, chai_config_spec_1.expect)(charlie.parent).to.equal(deltaClass.parentClassName);
        const bravo = charlie.obj;
        (0, chai_config_spec_1.expect)(bravo.parent).to.equal(charlie);
        const alpha = bravo.obj;
        (0, chai_config_spec_1.expect)(alpha.parent).to.equal(bravo);
    });
    describe('namespace validation', () => {
        it('succeeds if namespaces are defined inside other namespaces', () => {
            program.setFile('source/main.bs', `
                namespace alpha
                    ' random comment
                    namespace bravo
                        ' random comment
                        sub main()
                        end sub
                    end namespace
                end namespace
            `);
            program.validate();
            (0, testHelpers_spec_1.expectZeroDiagnostics)(program);
        });
        it('fails if namespaces are defined inside a function', () => {
            program.setFile('source/main.bs', `
                function f()
                    namespace alpha
                    end namespace
                end function
            `);
            program.validate();
            (0, testHelpers_spec_1.expectDiagnostics)(program, [
                DiagnosticMessages_1.DiagnosticMessages.keywordMustBeDeclaredAtNamespaceLevel('namespace')
            ]);
        });
    });
});
//# sourceMappingURL=BrsFileValidator.spec.js.map