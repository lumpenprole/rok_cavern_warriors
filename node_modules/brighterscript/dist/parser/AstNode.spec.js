"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const util_1 = require("../util");
const fsExtra = require("fs-extra");
const Program_1 = require("../Program");
const chai_config_spec_1 = require("../chai-config.spec");
const testHelpers_spec_1 = require("../testHelpers.spec");
const testHelpers_spec_2 = require("../testHelpers.spec");
describe('Program', () => {
    let program;
    beforeEach(() => {
        fsExtra.emptyDirSync(testHelpers_spec_2.tempDir);
        program = new Program_1.Program({
            rootDir: testHelpers_spec_2.rootDir,
            stagingDir: testHelpers_spec_2.stagingDir
        });
        program.createSourceScope(); //ensure source scope is created
    });
    afterEach(() => {
        fsExtra.emptyDirSync(testHelpers_spec_2.tempDir);
        program.dispose();
    });
    describe('AstNode', () => {
        describe('findNodeAtPosition', () => {
            it('finds deepest AstNode that matches the position', () => {
                const file = program.setFile('source/main.brs', `
                    sub main()
                        alpha = invalid
                        print alpha.beta.charlie.delta(alpha.echo.foxtrot())
                    end sub
                `);
                program.validate();
                (0, testHelpers_spec_1.expectZeroDiagnostics)(program);
                const delta = file.ast.findChildAtPosition(util_1.util.createPosition(3, 52));
                (0, chai_config_spec_1.expect)(delta.name.text).to.eql('delta');
                const foxtrot = file.ast.findChildAtPosition(util_1.util.createPosition(3, 71));
                (0, chai_config_spec_1.expect)(foxtrot.name.text).to.eql('foxtrot');
            });
        });
    });
});
//# sourceMappingURL=AstNode.spec.js.map